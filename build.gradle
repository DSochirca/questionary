allprojects {

    repositories {
        mavenCentral()
    }


    group = 'nl.tudelft.oopp'
    version = '0.0.1-SNAPSHOT'

}

subprojects {

    apply plugin: 'java'
    apply plugin: 'jacoco'
    apply plugin: 'checkstyle'
    apply plugin: 'application'

    ext {
        set('snippetsDir', file("build/generated-snippets"))
    }

    sourceCompatibility = 13

    jacoco {
        toolVersion = "0.8.5"
    }

    def jacocoExclude = [
            'nl/tudelft/oopp/demo/controllers/MainSceneController.class',
            'nl/tudelft/oopp/demo/controllers/QuestionRefresh.class',
            'nl/tudelft/oopp/demo/controllers/QuizResultController.class',
            'nl/tudelft/oopp/demo/controllers/ScheduledExecutor.class',
            'nl/tudelft/oopp/demo/controllers/ScheduledExecutorLecturer.class',
            'nl/tudelft/oopp/demo/data/cells/LectureQuestionCell.class',
            'nl/tudelft/oopp/demo/data/cells/LecturerModeQuestionCell.class',
            'nl/tudelft/oopp/demo/data/cells/StudentQuestionCell.class',
            'nl/tudelft/oopp/demo/views/DisplayApp.class',
            'nl/tudelft/oopp/demo/MainApp.class'
    ]

    jacocoTestReport {
        reports {
            xml.enabled false
            csv.enabled false
            html.destination file("${buildDir}/reports/jacoco/html")
        }

        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclude)
            }))
        }

    }

    jacocoTestCoverageVerification {
        afterEvaluate {
            classDirectories.setFrom(files(classDirectories.files.collect {
                fileTree(dir: it, exclude: jacocoExclude)
            }))
        }

        violationRules {
            rule {
                enabled = true
                element = 'CLASS'
                includes = ['nl.tudelft.*']

                limit {
                    counter = 'LINE'
                    value = 'COVEREDRATIO'
                    minimum = 0.4
                }
            }
        }
    }

    checkstyle {
        toolVersion "8.25"
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')

        ignoreFailures = false
        maxErrors = 0
        maxWarnings = 0
    }


    test {
        outputs.dir snippetsDir
        useJUnitPlatform()

        jacoco {
            enabled = true
            includes = ['nl.tudelft.*']
            excludes = jacocoExclude
        }

    }
}
